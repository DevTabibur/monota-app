[
    {
        "title" : "How will you improve the performance of a React Application?",
        "description": "1. Using Immutable Data Structures. 2. Function/Stateless Components and React.PureComponent. 3. Multiple Chunk Files. 4.Using Production Mode Flag in Webpack. 5.Dependency optimization. 6. Use React.Fragments to Avoid Additional HTML Element Wrappers. 7. Avoid Inline Function Definition in the Render Function. 8. Throttling and Debouncing Event Action in JavaScript"
    },
    {
        "title" : "What are the different ways to manage a state in a React application?",
        "description": "There are four main types of state you need to properly manage in your React apps: 1.Local state, 2.Global state, 3.Server state, 4URL state, 5.Communication State, 6.Data State, 7.Control State, 8.Session State, 9.Location State"
    },
    {
        "title" : "How does prototypical inheritance work?",
        "description": "Prototype-based programming is a style of object-oriented programming in which behaviour reuse (known as inheritance) is performed via a process of reusing existing objects that serve as prototypes. This model can also be known as prototypal, prototype-oriented, classless, or instance-based programming.The Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. Traditionally, in order to get and set the [[Prototype]] of an object, we use Object. getPrototypeOf and Object."
    },
    {
        "title" : "Why you do not set the state directly in React?",
        "description": "When you directly update the state, it does not change this. state immediately. Instead, it creates a pending state transition, and accessing it after calling this method will only return the present value. You will lose control of the state across all components.React will then look at the virtual DOM, it also has a copy of the old virtual DOM, that is why we shouldn't update the state directly, so we can have two different object references in memory, we have the old virtual DOM as well as the new virtual DOM."
    },
    {
        "title" : "What is a unit test? Why should write unit tests?",
        "description": "One of the benefits of unit tests is that they isolate a function, class or method and only test that piece of code. Higher quality individual components create overall system resiliency. Thus, the result is reliable code. Unit tests also change the nature of the debugging process"
    }
]